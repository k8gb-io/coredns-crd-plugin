package gateway

import "strings"

/*
Copyright 2022 The k8gb Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
*/

type Opts struct {
	annotation      string
	apex            string
	hostmaster      string
	hostname        string
	ttlLow          uint32
	ttlHigh         uint32
	zones           []string
	geoDataFilePath string
	geoDataField    []string
}

var (
	ttlLowDefault          = uint32(60)
	ttlHighDefault         = uint32(3600)
	defaultApex            = "dns"
	defaultHostname        = "ns1"
	defaultHostmaster      = "hostmaster"
	defaultGeoDataFilePath = "/geoip.mmdb"
	defaultGeoDataField    = "datacenter"
)

func NewGatewayOpts(annotation, apex, hostname, geoDataFilePath, geoDataField string, ttlLow, ttlHigh uint32, zones []string) Opts {
	opts := Opts{
		apex:            defaultApex,
		hostname:        defaultHostname,
		ttlLow:          ttlLowDefault,
		ttlHigh:         ttlHighDefault,
		hostmaster:      defaultHostmaster,
		geoDataFilePath: defaultGeoDataFilePath,
		geoDataField:    strings.Split(defaultGeoDataField, "."),
	}
	if apex != "" {
		opts.apex = apex
	}
	if hostname != "" {
		opts.hostname = hostname
	}
	if ttlLow != 0 {
		opts.ttlLow = ttlLow
	}
	if ttlHigh != 0 {
		opts.ttlHigh = ttlHigh
	}
	if geoDataFilePath != "" {
		opts.geoDataFilePath = geoDataFilePath
	}
	if geoDataField != "" {
		opts.geoDataField = strings.Split(geoDataField, ".")
	}
	opts.annotation = annotation
	opts.zones = zones
	return opts
}
