package k8sctrl

/*
Copyright 2022 The k8gb Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
*/

import (
	"net"
	"testing"

	"github.com/stretchr/testify/assert"
	"sigs.k8s.io/external-dns/endpoint"
)

// Test MaxMind DB contains:
// Endpoint IPs: 192.200.0.1-5 (US, UK, JP, CA, DE)
//   192.200.0.1 → US (country: US, continent: NA, city: New York)
//   192.200.0.2 → UK (country: GB, continent: EU, city: London)
//   192.200.0.3 → JP (country: JP, continent: AS, city: Tokyo)
//   192.200.0.4 → CA (country: CA, continent: NA, city: Toronto)
//   192.200.0.5 → DE (country: DE, continent: EU, city: Berlin)
//
// Client IPs: 192.201.0.1-3 (US, UK, JP)
//   192.201.0.1 → US (country: US, continent: NA, city: New York)
//   192.201.0.2 → UK (country: GB, continent: EU, city: London)
//   192.201.0.3 → JP (country: JP, continent: AS, city: Tokyo)

func TestExtractGeo(t *testing.T) {
	const testGeoDBPath = "testdata/test-geoip.mmdb"

	tests := []struct {
		name       string
		clientIP   string
		targets    []string
		fieldPaths [][]string
		geoDBPath  string
		expected   []string
		matchAny   bool
	}{
		{
			name:       "empty geoDataFilePath",
			clientIP:   "192.201.0.1",
			targets:    []string{"192.200.0.1"},
			fieldPaths: [][]string{{"country", "iso_code"}},
			geoDBPath:  "",
			expected:   nil,
		},
		{
			name:       "empty field paths",
			clientIP:   "192.201.0.1",
			targets:    []string{"192.200.0.1"},
			fieldPaths: [][]string{},
			geoDBPath:  testGeoDBPath,
			expected:   nil,
		},
		{
			name:       "single field match",
			clientIP:   "192.201.0.1",
			targets:    []string{"192.200.0.1", "192.200.0.2", "192.200.0.3"},
			fieldPaths: [][]string{{"country", "iso_code"}},
			geoDBPath:  testGeoDBPath,
			expected:   []string{"192.200.0.1"},
		},
		{
			name:     "hierarchical match - first field matches",
			clientIP: "192.201.0.1",
			targets:  []string{"192.200.0.1", "192.200.0.4"},
			fieldPaths: [][]string{
				{"country", "iso_code"},
				{"continent", "code"},
			},
			geoDBPath: testGeoDBPath,
			expected:  []string{"192.200.0.1"},
		},
		{
			name:     "hierarchical match - second field matches",
			clientIP: "192.201.0.1",
			targets:  []string{"192.200.0.2", "192.200.0.4"},
			fieldPaths: [][]string{
				{"country", "iso_code"},
				{"continent", "code"},
			},
			geoDBPath: testGeoDBPath,
			expected:  []string{"192.200.0.4"},
		},
		{
			name:     "hierarchical match - no matches",
			clientIP: "192.201.0.1",
			targets:  []string{"192.200.0.2", "192.200.0.3"},
			fieldPaths: [][]string{
				{"country", "iso_code"},
				{"continent", "code"},
			},
			geoDBPath: testGeoDBPath,
			expected:  nil,
		},
		{
			name:       "multiple matches same field",
			clientIP:   "192.201.0.1",
			targets:    []string{"192.200.0.1", "192.200.0.4", "192.200.0.2"},
			fieldPaths: [][]string{{"continent", "code"}},
			geoDBPath:  testGeoDBPath,
			expected:   []string{"192.200.0.1", "192.200.0.4"},
			matchAny:   true,
		},
		{
			name:     "three level hierarchy",
			clientIP: "192.201.0.1",
			targets:  []string{"192.200.0.4", "192.200.0.2"},
			fieldPaths: [][]string{
				{"city", "names", "en"},
				{"country", "iso_code"},
				{"continent", "code"},
			},
			geoDBPath: testGeoDBPath,
			expected:  []string{"192.200.0.4"},
		},
		{
			name:       "client IP not in database",
			clientIP:   "1.2.3.4",
			targets:    []string{"192.200.0.1"},
			fieldPaths: [][]string{{"country", "iso_code"}},
			geoDBPath:  testGeoDBPath,
			expected:   nil,
		},
		{
			name:       "endpoint IP not in database",
			clientIP:   "192.201.0.1",
			targets:    []string{"192.200.0.1", "5.6.7.8"},
			fieldPaths: [][]string{{"country", "iso_code"}},
			geoDBPath:  testGeoDBPath,
			expected:   []string{"192.200.0.1"},
		},
		{
			name:     "invalid field path",
			clientIP: "192.201.0.1",
			targets:  []string{"192.200.0.1"},
			fieldPaths: [][]string{
				{"nonexistent", "field"},
				{"country", "iso_code"},
			},
			geoDBPath: testGeoDBPath,
			expected:  []string{"192.200.0.1"},
		},
		{
			name:       "invalid endpoint IP string",
			clientIP:   "192.201.0.2",
			targets:    []string{"192.200.0.1", "not-an-ip", "192.200.0.2"},
			fieldPaths: [][]string{{"country", "iso_code"}},
			geoDBPath:  testGeoDBPath,
			expected:   []string{"192.200.0.2"},
		},
		{
			name:       "city level matching",
			clientIP:   "192.201.0.2",
			targets:    []string{"192.200.0.1", "192.200.0.2", "192.200.0.3"},
			fieldPaths: [][]string{{"city", "names", "en"}},
			geoDBPath:  testGeoDBPath,
			expected:   []string{"192.200.0.2"},
		},
		{
			name:       "all endpoints match continent",
			clientIP:   "192.201.0.2",
			targets:    []string{"192.200.0.2", "192.200.0.5"},
			fieldPaths: [][]string{{"continent", "code"}},
			geoDBPath:  testGeoDBPath,
			expected:   []string{"192.200.0.2", "192.200.0.5"},
			matchAny:   true,
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			lep := LocalDNSEndpoint{}
			ep := &endpoint.Endpoint{
				Targets: test.targets,
			}
			clientIP := net.ParseIP(test.clientIP)

			result := lep.extractGeo(ep, clientIP, test.geoDBPath, test.fieldPaths)

			if test.matchAny {
				assert.ElementsMatch(t, test.expected, result, "expected elements to match regardless of order")
			} else {
				assert.Equal(t, test.expected, result)
			}
		})
	}
}
