package k8sctrl

/*
Copyright 2022 The k8gb Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
*/

import (
	"context"
	"reflect"
	"sort"
	"testing"
	"unsafe"

	"github.com/k8gb-io/coredns-crd-plugin/common/mocks"
	"go.uber.org/mock/gomock"

	"sigs.k8s.io/external-dns/endpoint"

	dnsendpoint "github.com/k8gb-io/coredns-crd-plugin/extdns"
	"github.com/stretchr/testify/assert"
	"k8s.io/client-go/rest"
)

func TestKubeController(t *testing.T) {
	const label = "k8gb.absa.oss/dnstype=local"
	const host = "roundrobin.cloud.example.com"
	const hOSTCaseInsensitive = "roundrobin-case-insensitive.CLOUD.EXAMPLE.COM"
	const hostCaseInsensitive = "roundrobin-case-insensitive.cloud.example.com"
	const embeddedCaseSensitive = "embedded.CLOUD.EXAMPLE.COM"
	const embeddedCaseInsensitive = "embedded.cloud.example.com"
	var clientIP = []byte{0x0A, 0x0A, 0x0A, 0x01}
	defaultEP := &endpoint.DNSEndpoint{
		Spec: endpoint.DNSEndpointSpec{
			Endpoints: []*endpoint.Endpoint{
				{
					DNSName: "localtargets-" + host,
				},
				{
					DNSName: host,
					Labels:  map[string]string{"strategy": "roundrobin"},
					Targets: []string{"10.0.0.1", "10.0.0.2"},
				},
				{
					DNSName: hOSTCaseInsensitive,
					Labels:  map[string]string{"strategy": "roundrobin"},
					Targets: []string{"1.1.1.1", "1.1.1.2"},
				},
				{
					DNSName: hostCaseInsensitive,
					Labels:  map[string]string{"strategy": "roundrobin"},
					Targets: []string{"2.2.2.2"},
				},
			},
		},
	}

	ep1 := &endpoint.DNSEndpoint{
		Spec: endpoint.DNSEndpointSpec{
			Endpoints: []*endpoint.Endpoint{
				{
					DNSName: "localtargets-" + hOSTCaseInsensitive,
				},
				{
					DNSName: hOSTCaseInsensitive,
					Labels:  map[string]string{"strategy": "roundrobin"},
					Targets: []string{"1.1.1.1", "1.1.1.2"},
				},
			},
		},
	}

	ep2 := &endpoint.DNSEndpoint{
		Spec: endpoint.DNSEndpointSpec{
			Endpoints: []*endpoint.Endpoint{
				{
					DNSName: "localtargets-" + hOSTCaseInsensitive,
				},
				{
					DNSName: hostCaseInsensitive,
					Labels:  map[string]string{"strategy": "roundrobin"},
					Targets: []string{"2.2.2.2"},
				},
			},
		},
	}

	epEmbedded := &endpoint.DNSEndpoint{
		Spec: endpoint.DNSEndpointSpec{
			Endpoints: []*endpoint.Endpoint{
				{
					DNSName: "localtargets-" + embeddedCaseSensitive,
				},
				{
					DNSName: embeddedCaseInsensitive,
					Labels:  map[string]string{"strategy": "roundrobin"},
					Targets: []string{"10.10.10.32", "10.10.10.30"},
				},
				{
					DNSName: embeddedCaseSensitive,
					Labels:  map[string]string{"strategy": "roundrobin"},
					Targets: []string{"10.10.10.2"},
				},
			},
		},
	}

	ctrl := gomock.NewController(t)
	defer ctrl.Finish()
	mctrl := mocks.NewMockInterface(ctrl)
	mcache := mocks.NewMockSharedIndexInformer(ctrl)
	midx := mocks.NewMockIndexer(ctrl)
	midx.EXPECT().List().Return([]interface{}{defaultEP, ep1, ep2, epEmbedded}).AnyTimes()
	mcache.EXPECT().GetIndexer().Return(midx).AnyTimes()

	client := getClient(mctrl)

	var k8sctrl *KubeController
	t.Run("initialize", func(t *testing.T) {
		k8sctrl = NewKubeController(context.TODO(), client, label)
		assert.NotNil(t, k8sctrl)
		assert.False(t, k8sctrl.HasSynced())
		assert.Equal(t, 1, len(k8sctrl.controllers))
	})

	k8sctrl.epc = mcache

	t.Run("get no-geo endpoint by name", func(t *testing.T) {
		lep := k8sctrl.getEndpointByName(host, clientIP, "")
		assert.NotNil(t, lep)
		assert.Equal(t, "roundrobin.cloud.example.com: 0, Targets: [10.0.0.1 10.0.0.2], Labels: map[strategy:roundrobin]", lep.String())
	})

	t.Run("valid uppercase domain query", func(t *testing.T) {
		lep := k8sctrl.getEndpointByName(hOSTCaseInsensitive, clientIP, "")
		assert.NotNil(t, lep)
		sort.Strings(lep.Targets)
		assert.Equal(t, "roundrobin-case-insensitive.CLOUD.EXAMPLE.COM: 0, Targets: [1.1.1.1 1.1.1.2 2.2.2.2], Labels: map[strategy:roundrobin]", lep.String())

		lep = k8sctrl.getEndpointByName(hostCaseInsensitive, clientIP, "")
		assert.NotNil(t, lep)
		sort.Strings(lep.Targets)
		assert.Equal(t, "roundrobin-case-insensitive.cloud.example.com: 0, Targets: [1.1.1.1 1.1.1.2 2.2.2.2], Labels: map[strategy:roundrobin]", lep.String())
	})

	t.Run("handle multiple embedded endpoints", func(t *testing.T) {
		lep := k8sctrl.getEndpointByName(embeddedCaseInsensitive, clientIP, "")
		assert.NotNil(t, lep)
		sort.Strings(lep.Targets)
		assert.Equal(t, "embedded.cloud.example.com: 0, Targets: [10.10.10.2 10.10.10.30 10.10.10.32], Labels: map[strategy:roundrobin]", lep.String())

		lep = k8sctrl.getEndpointByName(embeddedCaseSensitive, clientIP, "")
		assert.NotNil(t, lep)
		sort.Strings(lep.Targets)
		assert.Equal(t, "embedded.CLOUD.EXAMPLE.COM: 0, Targets: [10.10.10.2 10.10.10.30 10.10.10.32], Labels: map[strategy:roundrobin]", lep.String())
	})

	t.Run("handle multiple embedded endpoints but one EP is empty", func(t *testing.T) {
		epEmbedded.Spec.Endpoints[1].Targets = []string{}
		lep := k8sctrl.getEndpointByName(embeddedCaseInsensitive, clientIP, "")
		assert.NotNil(t, lep)
		assert.Equal(t, "embedded.cloud.example.com: 0, Targets: [10.10.10.2], Labels: map[strategy:roundrobin]", lep.String())

		lep = k8sctrl.getEndpointByName(embeddedCaseSensitive, clientIP, "")
		assert.NotNil(t, lep)
		assert.Equal(t, "embedded.CLOUD.EXAMPLE.COM: 0, Targets: [10.10.10.2], Labels: map[strategy:roundrobin]", lep.String())

	})

	t.Run("EP has empty targets", func(t *testing.T) {
		epEmbedded.Spec.Endpoints[1].Targets = []string{}
		epEmbedded.Spec.Endpoints[2].Targets = []string{}
		epEmbedded.Spec.Endpoints[0].Targets = []string{}
		lep := k8sctrl.getEndpointByName(embeddedCaseInsensitive, clientIP, "")
		assert.NotNil(t, lep)
		assert.Equal(t, "embedded.cloud.example.com: 0, Targets: [], Labels: map[strategy:roundrobin]", lep.String())

		lep = k8sctrl.getEndpointByName(embeddedCaseSensitive, clientIP, "")
		assert.NotNil(t, lep)
		assert.Equal(t, "embedded.CLOUD.EXAMPLE.COM: 0, Targets: [], Labels: map[strategy:roundrobin]", lep.String())
	})

	t.Run("EP has no dns endpoints", func(t *testing.T) {
		epEmbedded.Spec.Endpoints = []*endpoint.Endpoint{}
		lep := k8sctrl.getEndpointByName(embeddedCaseInsensitive, clientIP, "")
		assert.NotNil(t, lep)
		assert.Equal(t, "embedded.cloud.example.com: 0, Targets: [], Labels: map[]", lep.String())

		lep = k8sctrl.getEndpointByName(embeddedCaseSensitive, clientIP, "")
		assert.NotNil(t, lep)
		assert.Equal(t, "embedded.CLOUD.EXAMPLE.COM: 0, Targets: [], Labels: map[]", lep.String())
	})

	t.Run("EP has nil dns endpoints", func(t *testing.T) {
		epEmbedded.Spec.Endpoints = nil
		lep := k8sctrl.getEndpointByName(embeddedCaseInsensitive, clientIP, "")
		assert.NotNil(t, lep)
		assert.Equal(t, "embedded.cloud.example.com: 0, Targets: [], Labels: map[]", lep.String())

		lep = k8sctrl.getEndpointByName(embeddedCaseSensitive, clientIP, "")
		assert.NotNil(t, lep)
		assert.Equal(t, "embedded.CLOUD.EXAMPLE.COM: 0, Targets: [], Labels: map[]", lep.String())
	})

}

func getClient(i rest.Interface) (c *dnsendpoint.ExtDNSClient) {
	c = &dnsendpoint.ExtDNSClient{}
	rs := reflect.ValueOf(c)
	q := (*rest.Interface)(unsafe.Pointer(rs.Elem().FieldByName("restClient").UnsafeAddr()))
	*q = i
	return c
}
