package dnsendpoint

/*
Copyright 2022 The k8gb Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
*/

import (
	"context"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/kubernetes/scheme"
	"k8s.io/client-go/rest"
	"sigs.k8s.io/external-dns/apis/v1alpha1"
)

const GroupName = "externaldns.k8s.io"
const GroupVersion = "v1alpha1"

var SchemeGroupVersion = schema.GroupVersion{Group: GroupName, Version: GroupVersion}

var (
	SchemeBuilder = runtime.NewSchemeBuilder(addKnownTypes)
	AddToScheme   = SchemeBuilder.AddToScheme
)

type ExtDNSClient struct {
	restClient rest.Interface
}

type ExtDNSInterface interface {
	DNSEndpoints(namespace string) DNSEndpoint
}

type dnsendpointClient struct {
	restClient rest.Interface
	ns         string
}

func (c *ExtDNSClient) DNSEndpoints(namespace string) DNSEndpoint {
	return &dnsendpointClient{
		restClient: c.restClient,
		ns:         namespace,
	}
}

type DNSEndpoint interface {
	List(ctx context.Context, opts metav1.ListOptions) (*v1alpha1.DNSEndpointList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
}

func NewForConfig(c *rest.Config) (*ExtDNSClient, error) {
	config := *c
	config.ContentConfig.GroupVersion = &schema.GroupVersion{Group: GroupName, Version: GroupVersion}
	config.APIPath = "/apis"
	config.NegotiatedSerializer = scheme.Codecs.WithoutConversion()
	config.UserAgent = rest.DefaultKubernetesUserAgent()

	client, err := rest.RESTClientFor(&config)
	if err != nil {
		return nil, err
	}

	return &ExtDNSClient{restClient: client}, nil
}

func (c *dnsendpointClient) List(ctx context.Context, opts metav1.ListOptions) (*v1alpha1.DNSEndpointList, error) {
	result := v1alpha1.DNSEndpointList{}
	err := c.restClient.
		Get().
		Namespace(c.ns).
		Resource("dnsendpoints").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do(ctx).
		Into(&result)

	return &result, err
}

func (c *dnsendpointClient) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.restClient.
		Get().
		Namespace(c.ns).
		Resource("dnsendpoints").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch(ctx)
}

func addKnownTypes(scheme *runtime.Scheme) error {
	scheme.AddKnownTypes(SchemeGroupVersion,
		&v1alpha1.DNSEndpoint{},
		&v1alpha1.DNSEndpointList{},
	)

	metav1.AddToGroupVersion(scheme, SchemeGroupVersion)
	return nil
}
