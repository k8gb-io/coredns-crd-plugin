package k8scrd

/*
Copyright 2022 The k8gb Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
*/

import (
	"testing"

	"github.com/coredns/caddy"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestParseArguments(t *testing.T) {
	var tests = []struct {
		name          string
		configuration string
		expectedError bool
		args          args
	}{
		{
			"valid args - single filter",
			`
						k8s_crd {
							filter k8gb.absa.oss/dnstype=local
							negttl 300
							kubecontroller local
							loadbalance weight
							apex xy
							annotation xy
						}`,
			false,
			args{filters: []string{"k8gb.absa.oss/dnstype=local"}, negttl: 300, kubecontroller: "local", loadbalance: weightRoundRobin,
				zones: []string{}, apex: "xy", annotation: "xy"},
		},
		{
			"valid args - multiple filters",
			`
						k8s_crd {
							filter k8gb.absa.oss/dnstype=local
							filter k8gb.absa.oss/dnstype=extdns
							negttl 300
							kubecontroller local
							loadbalance weight
							apex xy
							annotation xy
						}`,
			false,
			args{filters: []string{"k8gb.absa.oss/dnstype=local", "k8gb.absa.oss/dnstype=extdns"}, negttl: 300, kubecontroller: "local", loadbalance: weightRoundRobin,
				zones: []string{}, apex: "xy", annotation: "xy"},
		},
		{
			"invalid args",
			`
						k8s_crd {
							loadbalance weight
						}}`,
			true,
			args{zones: []string{}, negttl: 0, loadbalance: weightRoundRobin},
		},
		{
			"unrecognised arg",
			`
						k8s_crd {
							unrecognised invalid
							filter k8gb.absa.oss/dnstype=local
							negttl invalid
							kubecontroller local
							loadbalance weight
						}}`,
			true,
			args{zones: []string{}},
		},
		{
			"invalid ttl and negttl",
			`
						k8s_crd {
							ttl invalid
							negttl invalid
						}`,
			false,
			args{zones: []string{}, negttl: 0, ttl: 0},
		},
		{
			"empty args",
			`
						k8s_crd {
						}`,
			false,
			args{zones: []string{}, negttl: 0, ttl: 0},
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			c := caddy.NewTestController("dns", test.configuration)
			args, err := parse(c)
			require.Equal(t, test.expectedError, err != nil)
			assert.Equal(t, test.args, args)
		})
	}
}
